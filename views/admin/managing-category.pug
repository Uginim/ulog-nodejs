.container.mt-4
    h4 카데고리 관리
    form
        form-group            
            .container
                .row
                    .col
                        label 카데고리 목록
                        #category-tree
                            ul.list-group.mt-1                 
                    .col
                        form
                            .my-4
                                button#create-group.btn.btn-outline-primary.btn-sm.ml-2 
                                    svg(width="15" height="15")
                                        line(x1="7" y1="3" x2="7" y2="12" stroke-width="2" stroke="#26b2a2")
                                        line(x1="3" y1="7" x2="12" y2="7" stroke-width="2" stroke="#26b2a2")
                                    span 그룹 추가
                                //- button#delete-group.btn.btn-outline-primary.btn-sm.ml-2
                                //-     svg(width="15" height="15")
                                //-         //- line(x1="7" y1="3" x2="7" y2="12" stroke-width="2" stroke="#26b2a2")
                                //-         line(x1="3" y1="7" x2="12" y2="7" stroke-width="2" stroke="#26b2a2")
                                //-     span 그룹 삭제
                                button#create-category.btn.btn-outline-primary.btn-sm.ml-2
                                    svg(width="15" height="15")
                                        line(x1="7" y1="3" x2="7" y2="12" stroke-width="2" stroke="#26b2a2")
                                        line(x1="3" y1="7" x2="12" y2="7" stroke-width="2" stroke="#26b2a2")
                                    span 카데고리 추가
                                button#delete-category.btn.btn-outline-primary.btn-sm.ml-2
                                    svg(width="15" height="15")
                                        //- line(x1="7" y1="3" x2="7" y2="12" stroke-width="2" stroke="#26b2a2")
                                        line(x1="3" y1="7" x2="12" y2="7" stroke-width="2" stroke="#26b2a2")
                                    span 삭제
                            hr
                        form#edit-category.form-group
                            label 이름
                            input.form-control(type='text' name='name' disabled="true" )
                            button(class='btn mt-3 btn-lg btn-primary btn-block' type='button') 수정
    hr    
    script.
        var categoriesTab = document.querySelector('a[href="#categories"]');        
        var treeStructureMaker = (() => {
            var makeGroupNode = (group) => {
                const {id, name, parentId} =group ; 
                return {
                    type:'group',
                    id,
                    name,
                    parentId,
                    children : [],
                };

            };
            var makeCategoryNode = (category) => {
                const {id, name, parentId } = category;
                return {
                    type:'category',
                    id,
                    name,
                    parentId,
                }
            }
            var buildTreeStructure = (categoryGroups,categories)=>{
                var resultTreeStructure = {
                    root:{
                        type:'root',
                        id:null,
                        name:"root",
                        parentId:null,
                        children : [],
                    },
                    groups:{},
                    categories:{},
                };
                var missingChildren = {};
                categoryGroups.forEach(categoryGroup=>{
                    var newNode = makeGroupNode(categoryGroup);
                    if(!newNode.parentId){                        
                        resultTreeStructure.root.children.push(newNode);                        
                    } else if(resultTreeStructure.groups[newNode.parentId]) {
                        resultTreeStructure.groups[newNode.parentId].children.push(newNode);
                    } else { // the missing child
                        if(!missingChildren[newNode.parentId]){
                            missingChildren[newNode.parentId] = [];                            
                        } 
                        missingChildren[newNode.parentId].push(newNode);
                    }

                    newNode.children= missingChildren[newNode.id] || newNode.children;
                    resultTreeStructure.groups[newNode.id]= newNode;                        
                });
                categories.forEach(category=>{
                    var newNode = makeCategoryNode(category);
                    if(!newNode.parentId){
                        resultTreeStructure.root.children.push(newNode); 
                    } else {
                        resultTreeStructure.groups[newNode.parentId].children.push(newNode);
                    }
                    resultTreeStructure.categories[newNode.id]=newNode;
                });
                return resultTreeStructure;
            }
            return {
                makeGroupNode,
                makeCategoryNode,
                buildTreeStructure,
            }
        })();
        var makeTreeElementFromNode = (node) => {
            var newElement = document.createElement('li');
            newElement.setAttribute('value',node.type==='root' ? `${node.type}:${node.type}` :`${node.type}:${node.id}`);
            newElement.setAttribute('draggable',"true");                    
            //- newElement.setAttribute('droppable',"true");   //droppable 관계없는듯?
            if(node.type==='category') {
                newElement.innerHTML = `<label class="d-flex category-tree-node category">
                    <span>${node.name}</span>
                </label>`;
            } else {                       
                newElement.innerHTML = `<input type="checkbox" class="drop" checked id="${node.type}:${node.type}"><label for="${node.type}:${node.type}" class="d-flex category-tree-node ${node.type}">
                    <span class="mr-auto">${node.type==='root'? '/' : node.name}</span><span class="badge badge-primary badge-pill">${node.children.length}</span>
                </label><ul></ul>`;                       
            }
            return newElement;
        };
        var toggleExpanded = (target,event,propagation) => {
            var checkbox = target.querySelector('input[type="checkbox"]');
                if(checkbox)
                    checkbox.checked=!checkbox.checked;
            if(event && propagation === false )
                event.stopPropagation();
        }
        var expandItem = (target,event,propagation) => {
            var checkbox = target.querySelector('input[type="checkbox"]');
                if(checkbox)
                    checkbox.checked=false;
            if(event && propagation === false )
                event.stopPropagation();
        }
        var updateElementsOfTree = (categoryTreeElement,treeStructure) => {
            categoryTreeElement.innerHTML=""; 
            var appandTreeChildren = function appandTreeChildren(curNode,parentElement){
                var newElement = makeTreeElementFromNode(curNode);
                parentElement.appendChild(newElement);    
                if(curNode.type!=='category'){
                    var ul = newElement.querySelector('ul');
                    curNode.children.forEach(childNode=> {
                        appandTreeChildren(childNode,ul);
                    });
                }
                
            };
            appandTreeChildren(treeStructure.root,categoryTreeElement);
            var allListItems= categoryTreeElement.querySelectorAll('li');
            var allCheckbox= categoryTreeElement.querySelectorAll('input[type="checkbox"]');
            Array.prototype.forEach.call(allListItems,(li)=>{
                li.addEventListener('click',(e)=>{                   
                    Array.prototype.forEach.call(categoryTreeElement.querySelectorAll('li'),(li)=>{
                        li.classList.remove('active');
                    });                           
                    e.currentTarget.classList.toggle('active'); 
                    e.stopPropagation();//input도 한번더 호출되는 듯..
                    e.preventDefault();
                });
                
                li.addEventListener('dblclick',(e)=>{           
                    toggleExpanded(e.currentTarget,e,false);
                });
            });
            
            Array.prototype.forEach.call(allCheckbox,(input)=>{
                input.addEventListener('click',(e)=>{
                    
                    e.preventDefault();
                });
                
            });                 
            //동작하기 
            Array.prototype.forEach.call(allListItems,(li)=>{ 
                li.addEventListener('click',(e)=>{
                    var value = e.currentTarget.getAttribute('value');
                    const [type, id] = value.split(':');
                    var nameInput= document.querySelector('#edit-category input[name="name"]');
                    nameInput.disabled=false;
                    if(type==='category'){
                        nameInput.value = treeStructure.categories[parseInt(id)].name;
                    }                        
                    else if(type==='group')
                        nameInput.value = treeStructure.groups[parseInt(id)].name;
                    else 
                        nameInput.disabled=true;
                });
            });
            // Set Data when a drag starts // 드래그 시작 
            Array.prototype.forEach.call(allListItems,(li)=>{ 
                li.addEventListener('dragstart',(e)=>{      
                    var value = e.currentTarget.getAttribute('value');
                    console.log('dragstart',value);
                    e.dataTransfer.setData("value",value); 
                    e.stopPropagation();
                });
            });
            //dragOver
            Array.prototype.forEach.call(allListItems,(li)=>{ 
                li.addEventListener('dragover',(e)=>{                   
                    expandItem(e.currentTarget,e,false);
                    e.preventDefault();// for catching "drop" event 
                });
            });
            Array.prototype.forEach.call(allListItems,(li)=>{ 
                li.addEventListener('drop',(e)=>{                   
                    
                    var destStr = e.currentTarget.getAttribute('value');
                    var destDatas = destStr.split(':');
                    var destType = destDatas[0], destId = parseInt(destDatas[1]);
                    var srcStr = e.dataTransfer.getData("value");  
                    var srcDatas = srcStr.split(':');
                    var srcType = srcDatas[0], srcId = parseInt(srcDatas[1]);
                    var formData = new FormData();
                    console.log('drop from',srcStr,'to',destStr);
                    if(destType==='group' || destType ==='root') {
                        formData.append('childType',srcType);
                        formData.append('childId',srcId);
                        formData.append('newParentType',destType);
                        formData.append('newParentId',destId);
                        var xhr = new XMLHttpRequest();
                        xhr.open('PUT','/admin/move/category');
                        xhr.onload = ()=> {
                            updateCategoryTreeWithJson(JSON.parse(xhr.response));
                        };
                        xhr.send(formData);
                    }
                    e.stopPropagation();
                });
            });
        }
        var updateCategoryTreeWithJson = (json) => {
            var categoryTreeElement = document.querySelector('#category-tree ul');            
            const {categoryGroups, categories}= json;
            //Make Tree Structure                
            var treeStructure = treeStructureMaker.buildTreeStructure(categoryGroups,categories);                
            updateElementsOfTree(categoryTreeElement,treeStructure);
        };

        //카데고리 탭 클릭 
        categoriesTab.addEventListener('click',e=>{
            var xhr = new XMLHttpRequest();
            xhr.open('GET','/admin/categories');
            xhr.onload = () => {
                updateCategoryTreeWithJson(JSON.parse(xhr.response));
            };
            xhr.send();
        });
        

        //카데고리/그룹 삭제
        var btnDeleteGroup = document.getElementById('delete-category');
        btnDeleteGroup.addEventListener('click',(e)=> {
            e.preventDefault();
            var targetItem = document.querySelector('#category-tree li.active');
            var value = targetItem.getAttribute('value');
            const [type, id] = value.split(':');
            var formData = new FormData();
            formData.append('id',id);
            formData.append('type',type);
            var xhr = new XMLHttpRequest();
            xhr.open('DELETE','/admin/category/delete');
            xhr.onload= (e) => {
                updateCategoryTreeWithJson(JSON.parse(xhr.response));
            };
            xhr.send(formData);
        })
        //그룹 생성
        var btnCreateGroup = document.getElementById('create-group');
        btnCreateGroup.addEventListener('click',(e)=> {
            e.preventDefault();
            var targetItem = document.querySelector('#category-tree li.active');
            var value = (targetItem)? targetItem.getAttribute('value') : 'root:null';
            const [type, id] = value.split(':');
            var formData = new FormData();            
            if(type==='group')            
                formData.append('parentId',id);
            else 
                formData.append('parentId','null');  
            var xhr = new XMLHttpRequest();
            xhr.open('POST','/admin/categorygroup/create');
            xhr.onload = () => {
                updateCategoryTreeWithJson(JSON.parse(xhr.response));
            };
            xhr.send(formData);
        });
        //카데고리 생성
        var btnCreateCategory = document.getElementById('create-category');
        btnCreateCategory.addEventListener('click',(e)=> { 
            e.preventDefault();
            var targetItem = document.querySelector('#category-tree li.active');
            var value = (targetItem)? targetItem.getAttribute('value') : 'root:null';
            const [type, id] = value.split(':');
            var formData = new FormData();
            if(type==='group')            
                formData.append('parentId',id);
            else 
                formData.append('parentId','null');
            var xhr = new XMLHttpRequest();
            xhr.open('POST','/admin/category/create');
            xhr.onload = (e) => {
                updateCategoryTreeWithJson(JSON.parse(xhr.response));
            };
            xhr.send(formData);
        });
        //수정 버튼
        var btnUpdate = document.querySelector('#edit-category button');
        btnUpdate.addEventListener('click', (e)=> {
            var targetItem = document.querySelector('#category-tree li.active');
            var formData = new FormData();
            var form = document.getElementById('edit-category');
            var name = form.querySelector('input[name="name"]').value;
            var value = targetItem.getAttribute('value');
            const [type, id] = value.split(':');
            formData.append('type',type);
            formData.append('id',id);
            formData.append('name',name);
            var xhr = new XMLHttpRequest();
            xhr.open('PUT','/admin/update/category');
            xhr.onload = (e) => {
                updateCategoryTreeWithJson(JSON.parse(xhr.response));
            };
            xhr.send(formData);
        });
        
